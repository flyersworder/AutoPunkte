name: Activate Payback Coupons

on:
  schedule:
    # Run every Monday and Thursday at 00:00 UTC
    - cron: "0 0 * * 1,4"
  workflow_dispatch:

jobs:
  activate:
    name: Activate Coupons
    runs-on: macos-latest
    timeout-minutes: 15 # Prevent hung jobs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate secrets
        env:
          PAYBACK_USERNAME: ${{ secrets.PAYBACK_USERNAME }}
          PAYBACK_PASSWORD: ${{ secrets.PAYBACK_PASSWORD }}
        run: |
          if [ -z "$PAYBACK_USERNAME" ] || [ -z "$PAYBACK_PASSWORD" ]; then
            echo "::error::Missing required secrets. Please set PAYBACK_USERNAME and PAYBACK_PASSWORD in your repository secrets."
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup for Chrome and debugging
        run: |
          # Check for Chrome on macOS (it's in a different location than Linux)
          CHROME_PATH="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
          if [ -f "$CHROME_PATH" ]; then
            echo "Using pre-installed Chrome: $("$CHROME_PATH" --version)"
          else
            echo "Chrome not found at expected path, checking alternatives"
            find /Applications -name "Google Chrome*.app" -maxdepth 1
          fi

          # Check for ChromeDriver
          if [ -n "$CHROMEWEBDRIVER" ] && [ -f "$CHROMEWEBDRIVER/chromedriver" ]; then
            echo "Using ChromeDriver: $($CHROMEWEBDRIVER/chromedriver --version)"
          else
            echo "ChromeDriver path: $CHROMEWEBDRIVER"
            find /usr/local -name "chromedriver*" 2>/dev/null || echo "No chromedriver found"
          fi

          # Install xquartz for display support
          brew install --cask xquartz

          # Create debug directory
          mkdir -p debug_info

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync

      - name: Install OpenVPN
        run: brew install openvpn

      - name: Create Mullvad Auth File
        run: |
          echo "${{ secrets.MULLVAD_USER }}" > Mullvad.tblk/mullvad_userpass.txt
          echo "m" >> Mullvad.tblk/mullvad_userpass.txt
        shell: bash

      - name: Connect to VPN for consistent IP
        uses: kota65535/github-openvpn-connect-action@v2
        with:
          config_file: Mullvad.tblk/mullvad_de_ber.conf # Use Mullvad config
          # Auth is handled by 'auth-user-pass' directive within the .conf file

      - name: Verify VPN Connection
        run: curl ifconfig.me

      - name: Activate Payback coupons
        id: activate
        env:
          PAYBACK_USERNAME: ${{ secrets.PAYBACK_USERNAME }}
          PAYBACK_PASSWORD: ${{ secrets.PAYBACK_PASSWORD }}
          GITHUB_ACTIONS: "true" # Explicitly set for script detection
          PYTHONUNBUFFERED: "1" # Ensure Python output is not buffered
          DEBUG: "1" # Enable additional debugging
          CHROME_PATH: "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" # macOS Chrome path
        run: |
          # Start virtual display for macOS
          defaults write org.x.X11 app_to_run /usr/bin/true
          open -a XQuartz
          sleep 5

          # Collect system info for debugging
          echo "System info:" > debug_info/system_info.txt
          uname -a >> debug_info/system_info.txt
          sw_vers >> debug_info/system_info.txt
          echo "Chrome info:" >> debug_info/system_info.txt

          # Use the correct path for Chrome on macOS
          CHROME_PATH="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
          if [ -f "$CHROME_PATH" ]; then
            "$CHROME_PATH" --version >> debug_info/system_info.txt
          else
            echo "Chrome not found at expected path" >> debug_info/system_info.txt
            ls -la /Applications/ | grep Google >> debug_info/system_info.txt
          fi

          # Run the activation script with more verbose output
          uv run activate.py --log-level DEBUG

      - name: Upload activation logs
        if: always() # Run even if previous steps failed
        uses: actions/upload-artifact@v4
        with:
          name: activation-logs
          path: |
            payback_activation_*.log
            autopunkte.log
            activation_results_*.json
            debug_info/*
          retention-days: 7

      - name: Upload screenshots and HTML
        if: always() # Always upload screenshots to help with debugging
        uses: actions/upload-artifact@v4
        with:
          name: activation-results
          path: |
            payback_coupons_*.png
            payback_coupons_*.html
          retention-days: 7

      - name: Upload debug screenshots
        if: always() # Always upload debug screenshots
        uses: actions/upload-artifact@v4
        with:
          name: debug-screenshots
          path: |
            debug_*.png
            payback_debug_*.png
          retention-days: 7

      - name: Send notification on failure
        if: failure()
        run: |
          echo "Payback coupon activation workflow failed. Check the logs for details."
          # You could add additional notification methods here (email, Slack, etc.)
